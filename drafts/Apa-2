|Lunes, 6 de Junio de 2011|

No se puede manipular directamente la cola de muestreo, tal y como se
concebía en el segundo capítulo de la memoria, como una RAM en forma de
tabla con celdas vacías y celdas ocupadas por canales. MATLAB no lo
permite, los drivers no lo permiten. En lugar de eso, MATLAB ofrece la
posibilidad de añadir canales a un objeto dispositivo (se entiende que
hasta el máximo permitido por el dispositivo, en el caso de la KPCI-3108,
256 canales, aunque no se ha hecho una prueba para verificar esta
cantidad). A cada canal se le asignan unas propiedades: frecuencia de
muestreo, modo de adquisición, puerto de entrada..., y MATLAB
automáticamente genera una configuración para la cola (aunque no se sabe si
óptima de cara al rendimiento, atendiendo a los criterios expuestos en el
segundo capítulo). Pero, en la práctica, es posible muestrear varios
canales simultáneamente (también utilizando MATLAB para ello) y esa es una
facilidad importante que la aplicación no proporciona al usuario. El
osciloscopio integrado en MATLAB (sí, todo hay que decirlo, MATLAB
incorpora de serie un osciloscopio que le pega milpatadas al mío, pero que
si uno no se lee el apéndice y no lo sabe, nunca lo sabrá, muah ja ja!) da
la posibilidad al usuario de muestrear varios canales, pero éste no, debido
principalmente a la complicación que entraña implementar un diseño que
permita la utilización simultánea de varios canales. Son necesarios:
pestañas, actualización simultánea de datos internos de la aplicación...,
hay que recordar que actuar simultáneamente sobre varios canales implica
una repartición de los recursos de la tarjeta de adquisición que debe
reflejarse en la interfaz de la aplicación. MATLAB los reparte de forma
equitativa, por poner un ejemplo, la frecuencia de muestreo, o el
rendimiento máximo que puede asignarse a un canal es el máximo de la
tarjeta dividido por el número de canales asociados al objeto dispositivo.

Básicamente, cuando yo asigno más de un canal a un objeto dispositivo
enlazado a la tarjeta de adquisición, MATLAB se encarga de que el valor
máximo de la frecuencia de muestreo se limite al cociente entre el
rendimiento máximo de la tarjeta y el número de canales adscritos al objeto
dispositivo. Esto de algún modo debe reflejarse en la interfaz, de modo que
al usuario no se le permita configurar un rendimiento superior al límite
establecido independientemente del número de canales que haya solicitado,
haciendo que el desarrollo de la interfaz sea algo más complicado.

Quizá el principal motivo por el cual no se ha implementado la posibilidad
de trabajar simultáneamente con varios canales es que no resulta práctico.
Por varias razones: el rendimiento del dispositivo ya es de por sí bastante
limitado como para dividirlo entre distintos canales; en la mayoría de
experimentos es suficiente con visualizar una única señal. También está el
hecho de que aunque se eliminen canales porque ya no son necesarios, MATLAB
no levanta el límite impuesto a recursos como la frecuencia de muestreo, lo
cual complicaría el uso de la aplicación.

---------------------------------------------------------------------------

La otra limitación que comporta el uso de la aplicación de control es de
menor relevancia, se trata de la configuración de controles que presenta la
interfaz y del comportamiento de algunos de estos controles. Los controles
que presenta la interfaz de usuario de la aplicación de control no dan
acceso a todas las propiedades de configuración de la tarjeta de
adquisición. Esto ocurre por un motivo, las propiedades de configuración de
un objeto dispositivo son muchas, demasiadas si han de representarse
mediante controles en una interfaz. El resultado de que cada propiedad se
viese representada por su respectivo control sería una interfaz confusa y
poco práctica. En lugar de esto se ha optado por limitar el número de
controles que aparece en la interfaz dando prioridad a aquellos que se
entiende se utilizan con mayor frecuencia en un experimento estándar. Luego
está el hecho de que algunos controles se deshabilitan durante la sesión de
adquisición, esto, a su vez, ocurre por dos motivos. El primero, que
existen propiedades que no pueden modificarse durante la sesión de
adquisición, p.e. MATLAB bloquea la frecuencia de muestreo para que no
pueda modificarse al vuelo durante una sesión de adquisición. El otro
motivo por el que esto ocurre es que en algunos casos modificar el atributo
de una cierta propiedad puede complicar en gran medida la realización de
los cálculos necesarios para representar por pantalla los datos recabados
durante la sesión de adquisición. En vistas a simplificar en la medida de
lo posible el código se han bloqueado los controles problemáticos en este
sentido.
